@page "/AddEvent"
@page "/UpdateEvent/{id:int}"
@using EventApp.Services
@using Microsoft.AspNetCore.Authorization
@using EventApp.Entities
@inject IEventService EventService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [RenderModeInteractiveServer]
@attribute [Authorize]

@if (Id == null)
{
    <PageTitle>Dodaj wydarzenie</PageTitle>
    <h3>Edytuj wydarzenie</h3>
}
else
{
    <PageTitle>Edytuj wydarzenie</PageTitle>
    <h3>Edytuj wydarzenie</h3>
}


<Authorized>
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="@_event" OnValidSubmit="Submit">
                <div>
                    <label for="Name">Event name</label>
                    <InputText id="Name" @bind-Value="_event.Name" class="form-control"></InputText>
                </div>
                <div>
                    <label for="Description">Description</label>
                    <InputTextArea id="Description" @bind-Value="_event.Description" class="form-control"></InputTextArea>
                </div>
                <div>
                    <label for="Type">Type</label>
                    <InputSelect id="Type" @bind-Value="_event.TypeId" class="form-select">
                        @foreach (Entities.Type type in _types)
                        {
                            <option value="@type.Id">@type.Name</option>
                        }
                    </InputSelect>
                </div>
                <div>
                    <label for="Purpose">Purpose</label>
                    <select class="form-select" multiple @onchange=@((args) => OnMultipleSelectChange(args))>
                        @foreach (Purpose purpose in _purposes)
                        {
                            if (Id != null && _event.Purpose != null)
                            {
                                if(_event.Purpose.Contains(purpose))
                                   {
                                    <option value="@purpose.Id" selected="selected">@purpose.Name</option>
                                }
                                else
                                {
                                    <option value="@purpose.Id">@purpose.Name</option>
                                }
                            }
                            else
                            {
                                <option value="@purpose.Id">@purpose.Name</option>
                            }
                        }
                    </select>
                </div>
                <div>
                    <label for="StartDate">Start Date</label>
                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="dd/MM/YYYY hh:mm:ss"
                               min="@DateTime.Today.ToString("YYYY-MM-dd")" id="StartDate" @bind-Value="_event.StartDate" class="form-control"></InputDate>
                </div>
                <div>
                    <label for="EndDate">End Date</label>
                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="dd/MM/YYYY hh:mm:ss"
                               min="@_event.StartDate" @bind-Value="_event.EndDate" class="form-control"></InputDate>
                </div>
                <div>
                    <label for="Status">Status</label>
                    <InputSelect id="Status" @bind-Value="_event.StatusId" class="form-select">
                        @foreach (Status status in _status)
                        {
                            <option value="@status.Id">@status.Name</option>
                        }
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary">@btnText</button>
                @if (Id != null)
                {
                    <button @onclick="DeleteEvent" class="btn btn-danger">Usuń wydarzenie</button>
                }
            </EditForm>
        </div>
    </div>

</Authorized>
@code {
    [Parameter]
    public int? Id { get; set; }
    List<Entities.Type> _types { get; set; }
    List<Purpose> _purposes { get; set; }
    List<Status> _status { get; set; }
    Event _event = new Event();
    List<Purpose> _selectedPurposes { get; set; }
    string btnText = string.Empty;
    Dictionary<string, object> IsSelected;

    protected override async Task OnInitializedAsync()
    {
        _types = EventService.GetType();
        _purposes = EventService.GetPurpose();
        _status = EventService.GetStatus();
        _event.StartDate = DateTime.Today;
        _event.EndDate = DateTime.Today;
        btnText = Id == null ? "Dodaj wydarzenie" : "Zaktualizuj wydarzenie";

    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            var id = authstate.User.Identity.Name;
            _event.User = id;
        }
        else
        {
            _event = EventService.GetEvent((int)Id);
            IsSelected = new Dictionary<string, object>();
            IsSelected["selected"] = "selected";
        }
    }

    async Task Submit()
    {
        _event.Purpose = _selectedPurposes;
        _event.AdminStatusId = 1;
        if (Id == null)
            await EventService.AddEvent(_event);
        else
            await EventService.UpdateEvent(_event);
    }

    private void OnMultipleSelectChange(ChangeEventArgs args)
    {
        _selectedPurposes = new List<Purpose>();
        foreach (var x in (string[])args.Value)
        {
            _selectedPurposes.Add(_purposes.Where(i => i.Id == Convert.ToInt16(x)).FirstOrDefault());
        }
    }

    private async void DeleteEvent()
    {
        await EventService.RemoveEvent(_event);
        Navigation.NavigateTo("/");
    }
}
