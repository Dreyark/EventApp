@page "/AddEvent"
@page "/UpdateEvent/{id:int}"
@using EventApp.Services
@using Microsoft.AspNetCore.Authorization
@using EventApp.Entities
@inject IEventService EventService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [RenderModeInteractiveServer]
@attribute [Authorize]

@if (Id == null)
{
    <PageTitle>Dodaj wydarzenie</PageTitle>
    <h3>Edytuj wydarzenie</h3>
}
else
{
    <PageTitle>Edytuj wydarzenie</PageTitle>
    <h3>Edytuj wydarzenie</h3>
}
<AuthorizeView Context="auth">
    @if (auth.User.Identity?.Name! == _event.User && auth.User.IsInRole("Member") || auth.User.IsInRole("Admin"))
    {
        <div class="row">
            <div class="col-md-6">
                <EditForm EditContext="editContext" OnValidSubmit="Submit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="Name">Nazwa wydarzenia</label>
                        <InputText id="Name" @bind-Value="_event.Name" class="form-control m-1"></InputText>
                    </div>
                    <div>
                        <label for="Description">Opis wydarzenia</label>
                        <InputTextArea id="Description" @bind-Value="_event.Description" class="form-control m-1"></InputTextArea>
                    </div>
                    <div>
                        <label for="Type">Typ wydarzenia</label>
                        <InputSelect id="Type" @bind-Value="_event.TypeId" class="form-select m-1">
                            @foreach (Entities.Type type in _types)
                            {
                                <option value="@type.Id">@type.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div>
                        <label for="Purpose">Cel wydarzenia</label>
                        <select class="form-select m-1" multiple @onchange=@((args) => OnMultipleSelectChange(args))>
                            @foreach (Purpose purpose in _purposes)
                            {
                                if (Id != null && _event.Purpose != null)
                                {
                                    if (_event.Purpose.Contains(purpose))
                                    {
                                        <option value="@purpose.Id" selected="selected">@purpose.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@purpose.Id">@purpose.Name</option>
                                    }
                                }
                                else
                                {
                                    <option value="@purpose.Id">@purpose.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div>
                        <label for="StartDate">Data rozpoczęcia</label>
                        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="dd/MM/YYYY hh:mm:ss"
                                   @bind-Value="_event.StartDate" class="form-control m-1"></InputDate>
                    </div>
                    <div>
                        <label for="EndDate">Data zakończenia</label>
                        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="dd/MM/YYYY hh:mm:ss"
                                   @bind-Value="_event.EndDate" class="form-control m-1"></InputDate>
                    </div>
                    <div>
                        <label for="Status">Status</label>
                        <InputSelect id="Status" @bind-Value="_event.StatusId" class="form-select m-1">
                            @foreach (Status status in _status)
                            {
                                <option value="@status.Id">@status.Name</option>
                            }
                        </InputSelect>
                    </div>
                    @if (auth.User.IsInRole("Admin"))
                    {
                        <div>
                            <label for="AdminStatus">Admin Status</label>
                            <InputSelect id="AdminStatus" @bind-Value="_event.AdminStatusId" class="form-select m-1">
                                @foreach (AdminStatus adminStatus in _AdminStatus)
                                {
                                    <option value="@adminStatus.Id">@adminStatus.Name</option>
                                }
                            </InputSelect>
                        </div>
                    }
                    <div>
                        <button type="submit" class="btn btn-primary m-1">@btnText</button>
                        @if (Id != null)
                        {
                            <button @onclick="DeleteEvent" class="btn btn-danger">Usuń wydarzenie</button>
                        }
                    </div>
                </EditForm>
            </div>
        </div>
    }
    else
    {
        Navigation.NavigateTo("/");
    }
</AuthorizeView>
@code {
    [Parameter]
    public int? Id { get; set; }
    List<Entities.Type> _types { get; set; }
    List<Purpose> _purposes { get; set; }
    List<Status> _status { get; set; }
    List<AdminStatus> _AdminStatus { get; set; }
    Entities.Event _event { get; set; }
    List<Purpose> _selectedPurposes = new List<Purpose>();
    string btnText = string.Empty;
    Dictionary<string, object> IsSelected;
    EditContext editContext;
    private ValidationMessageStore? messageStore;
    protected override async Task OnInitializedAsync()
    {
        _types = EventService.GetType();
        _purposes = EventService.GetPurpose();
        _status = EventService.GetStatus();
        _AdminStatus = EventService.GetAdminStatus();
        btnText = Id == null ? "Dodaj wydarzenie" : "Zaktualizuj wydarzenie";
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            _event = new Entities.Event();
            _event.StartDate = DateTime.Today;
            _event.EndDate = DateTime.Today;
            var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            var id = authState.User.Identity?.Name;
            _event.User = id;
        }
        else
        {
            try
            {
                _event = EventService.GetEvent((int)Id);
            }
            catch (Exception e)
            {
                Navigation.NavigateTo("/");
            }
            IsSelected = new Dictionary<string, object>();
            IsSelected["selected"] = "selected";
        }
        editContext = new EditContext(_event);
        editContext.OnValidationRequested += EndDateValidation;
        messageStore = new(editContext);
    }

    async Task Submit()
    {
        _event.Purpose = _selectedPurposes;
        if (_event.AdminStatusId == 0)
            _event.AdminStatusId = 1;
        if (Id == null)
            await EventService.AddEvent(_event);
        else
            await EventService.UpdateEvent(_event);
        Navigation.NavigateTo("/");
    }

    private void OnMultipleSelectChange(ChangeEventArgs args)
    {
        _selectedPurposes.Clear();
        foreach (var x in (string[])args.Value)
        {
            _selectedPurposes.Add(_purposes.Where(i => i.Id == Convert.ToInt16(x)).FirstOrDefault());
        }
    }

    private async void DeleteEvent()
    {
        await EventService.RemoveEvent(_event);
        Navigation.NavigateTo("/");
    }

    private void EndDateValidation(object? sender,
    ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();
        if (_event.StartDate > _event.EndDate)
        {
            messageStore?.Add(() => _event.EndDate, "Data zakończenia musi występować po dacie rozpoczęcia");
        }
    }
}
